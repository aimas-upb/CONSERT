package org.aimas.consert

// Declare the metadata for the `Position` and `LLA` events
import org.aimas.consert.tests.hla.entities.Area

import org.aimas.consert.tests.hla.assertions.Position
import org.aimas.consert.tests.hla.assertions.SittingLLA

import org.aimas.consert.tests.hla.assertions.WorkingHLA

import org.aimas.consert.model.annotations.AnnotationData
import org.aimas.consert.model.annotations.DefaultAnnotationData
import org.aimas.consert.model.annotations.AnnotationUtils


import org.aimas.consert.engine.core.EventTracker
import org.apache.log4j.Logger
import org.aimas.consert.engine.core.EventWindowManager
import org.aimas.consert.engine.core.ChangePointManager

global EventTracker eventTracker;
global Logger generalRuleLogger;
global Logger eventWindowLogger;
global EventWindowManager eventWindowManager;
global ChangePointManager changePointManager;

// ============ Declare Position metadata
declare Position
    @role(event)
    //@timestamp(startTimestamp)
    //@duration(eventDuration)
end

// ============ Declare LLA metadata
declare SittingLLA
    @role(event)
end

// =========== Declare HLA metadata
declare WorkingHLA
    @role(event)
end


rule "ExtendedWorkingHLATest"
    when
        $hla : WorkingHLA(p : person) from entry-point "ExtendedWorkingHLAStream"
    then
        DefaultAnnotationData ann = (DefaultAnnotationData)$hla.getAnnotations();
        
        System.out.println("Inserted EXTENDED WORKING HLA event with person: " + p.getName()  + ", lastUpdated: " +
            (long)ann.getLastUpdated() + ", from: " +
            ann.getStartTime().getTime() + ", to: " +
            ann.getEndTime().getTime());
end


rule "AfterTestRule"
    when
        $pos : Position($p : person, type.getValue() == "WORK_AREA", $annPos : annotations) from entry-point "ExtendedPositionStream"
        $lla : SittingLLA(person == $p, $annLLA : annotations, this annHappensAfter $pos) from entry-point "ExtendedLLAStream"
    then
        // create ExerciseHLA
        AnnotationData ann = $annPos.applyExtensionOperator($annLLA);
        WorkingHLA hla = new WorkingHLA($p, ann);
        
        eventTracker.insertDerivedEvent(hla);
        System.out.println("[INFO] Derived HLA: " + hla + " FROM :\n\t POS: " + $pos + " \n\t LLA: " + $lla);
end


rule "NotAfterTestRule"
    when
        $pos : Position($p : person, type.getValue() == "WORK_AREA", $annPos : annotations) from entry-point "ExtendedPositionStream"
        not( $lla : SittingLLA(person == $p, $annLLA : annotations, this annHappensAfter $pos) from entry-point "ExtendedLLAStream")
    then
        System.out.println("[INFO] NO LLA after POS: " + $pos);
end



