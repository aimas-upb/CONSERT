    package org.aimas.consert

// Declare Metadata for CASAS events
import org.aimas.consert.tests.casas.assertions.Item
import org.aimas.consert.tests.casas.assertions.Cabinet
import org.aimas.consert.tests.casas.assertions.Water
import org.aimas.consert.tests.casas.assertions.Burner
import org.aimas.consert.tests.casas.assertions.PersonLocation
import org.aimas.consert.tests.casas.assertions.PreparingSoup
import org.aimas.consert.tests.casas.assertions.Cleaning
import org.aimas.consert.tests.casas.assertions.WaterPlants

import org.aimas.consert.model.annotations.AnnotationData
import org.aimas.consert.model.annotations.DefaultAnnotationData
import org.aimas.consert.model.annotations.AnnotationUtils

import org.aimas.consert.tests.casas.entitydescriptions.ActivityTriggered

import org.aimas.consert.engine.EventTracker
import org.aimas.consert.utils.AssertionLogger

import java.util.Date;

global EventTracker eventTracker;
global AssertionLogger assertionLogger;

declare PreparingSoup
    @role(event)
end

declare Cleaning
    @role(event)
end

declare WaterPlants
    @role(event)
end

rule "Cooking soup when taking soup/glass item and using water"
    when
        $loc : PersonLocation(location == "Kitchen",
            locAnn : annotations#DefaultAnnotationData) 
            from entry-point "ExtendedPersonLocationStream"
        
        $soup : Item(sensorId == "soup" || sensorId == "glass" , status == "ABSENT",
            soupAnn : annotations#DefaultAnnotationData,  
            $loc annIncludes this) from entry-point "ItemStream"
            
        exists Water(this before[0s, 30s] $soup || this after[0s, 30s] $soup) from entry-point "WaterStream"
    then
        System.out.println("////// Triggering Cooking Soup rule - get soup - following events: " + $loc + ", "
            + $soup  + "\n");
        
        long ts = eventTracker.getCurrentTime();
        DefaultAnnotationData cookAnn = 
            new DefaultAnnotationData(ts, locAnn.getConfidence(), soupAnn.getStartTime(), new Date(ts));
        
        PreparingSoup cookSoup = new PreparingSoup(cookAnn);
        eventTracker.insertDerivedEvent(cookSoup);
end


rule "Cooking soup when using fridge"
    when
        $loc : PersonLocation(location == "Kitchen",
            locAnn : annotations#DefaultAnnotationData) 
            from entry-point "ExtendedPersonLocationStream"
        
        $item : Cabinet(sensorId == "fridge" || sensorId == "freezer" || sensorId == "microwave",
            itemAnn : annotations#DefaultAnnotationData,
            $loc annIncludes this) from entry-point "CabinetStream"
            
        exists PreparingSoup(this annIntersects $loc || this annHappensBefore[0s, 4m] $item) 
            from entry-point "ExtendedPreparingSoupStream"
            
        not (exists Cleaning(this annIntersects $loc, this annHappensBefore[0s, 10s] $item) from entry-point "ExtendedCleaningStream")
        not (exists WaterPlants(this annIntersects $loc, this annHappensBefore[0s, 10s] $item) from entry-point "ExtendedWaterPlantsStream")
    then
        System.out.println("////// Triggering Cooking Soup rule - use fridge and microwave - following events: " + $loc + ", "
            + $item  + "\n");
        
        long ts = eventTracker.getCurrentTime();
        DefaultAnnotationData cookAnn = 
            new DefaultAnnotationData(ts, locAnn.getConfidence(), itemAnn.getStartTime(), new Date(ts));
        
        PreparingSoup cookSoup = new PreparingSoup(cookAnn);
        eventTracker.insertDerivedEvent(cookSoup);
end

// ==========================================================
/*
rule "Soup taken"
    when 
         $loc : PersonLocation(location == "Kitchen") from entry-point "ExtendedPersonLocationStream"
         $soup: Item(sensorId == "soup" || sensorId == "glass" , status == "ABSENT",  this before [0s, 10s] $loc || this after [0s, 10s] $loc) from entry-point "ItemStream"
    then
        System.out.println("////// Triggering SOUP TAKEN rule following events: " + $loc + ", "
            + $soup  + "\n");
        
        long ts = drools.getWorkingMemory().getSessionClock().getCurrentTime();
        ActivityTriggered SoupTaken = new ActivityTriggered("SoupTaken", ts);
        eventTracker.insertStaticEvent(SoupTaken);
end


rule "Preparing Soup"
    //timer (int: 0s 2s)
    when
        $SoupTaken: ActivityTriggered(name == "SoupTaken")
        $loc : PersonLocation(location == "Kitchen") from entry-point "ExtendedPersonLocationStream"
    then
        System.out.println("////// Triggering Preparing SOUP rule following events: "  + $SoupTaken + "," +  "\n");

       long ts = drools.getWorkingMemory().getSessionClock().getCurrentTime();
       AnnotationData ann = new DefaultAnnotationData(ts);
       PreparingSoup preparingSoup = new PreparingSoup(ann);

       eventTracker.insertEvent(preparingSoup);
end


rule "Stop preparing soup"
    //timer (int: 0s 2s)
    when
        $SoupTaken: ActivityTriggered(name == "SoupTaken")
        $loc : PersonLocation(location != "Kitchen") from entry-point "ExtendedPersonLocationStream"
    then
        System.out.println("////// Triggering STOP PREPARING SOUP rule following events: "  + $SoupTaken + "," +  "\n");
        eventTracker.deleteStaticEvent($SoupTaken);
end
*/