package org.aimas.consert

// Declare Metadata for CASAS events
import org.aimas.consert.tests.casas.assertions.Motion
import org.aimas.consert.tests.casas.assertions.Item
import org.aimas.consert.tests.casas.assertions.Cabinet
import org.aimas.consert.tests.casas.assertions.Water
import org.aimas.consert.tests.casas.assertions.Temperature
import org.aimas.consert.tests.casas.assertions.Burner
import org.aimas.consert.tests.casas.assertions.Phone
import org.aimas.consert.tests.casas.assertions.PersonLocation

import org.aimas.consert.model.annotations.AnnotationData
import org.aimas.consert.model.annotations.DefaultAnnotationData
import org.aimas.consert.model.annotations.AnnotationUtils

import org.aimas.consert.engine.EventTracker

global EventTracker eventTracker;


declare Motion
    @role(event)
    @timestamp(startTimestamp)
    @duration(eventDuration)
end


declare Item
    @role(event)
    @timestamp(startTimestamp)
    @duration(eventDuration)
end


declare Cabinet
    @role(event)
    @timestamp(startTimestamp)
    @duration(eventDuration)
end

declare Water
    @role(event)
    @timestamp(startTimestamp)
    @duration(eventDuration)
end


declare Temperature
    @role(event)
    @timestamp(startTimestamp)
    @duration(eventDuration)
end

declare Burner
    @role(event)
    @timestamp(startTimestamp)
    @duration(eventDuration)
end

declare Phone
    @role(event)
    @timestamp(startTimestamp)
    @duration(eventDuration)
end

declare PersonLocation
    @role(event)
    @timestamp(startTimestamp)
    @duration(eventDuration)
end

// =========== High level derivation rules
// ================ at_dining_table
rule "At Dining Table"
    salience 100
    when 
        $motion : Motion(sensorId == "M13" || sensorId == "M14" , status == "ON") from entry-point "MotionStream"
    then
        // create atomic PersonLocation ContextAssertion
        DefaultAnnotationData motionAnn = (DefaultAnnotationData)$motion.getAnnotations();
        DefaultAnnotationData ann = new DefaultAnnotationData(motionAnn.getLastUpdated(), motionAnn.getConfidence());
        PersonLocation loc = new PersonLocation("DiningTable", ann);
        
        eventTracker.insertAtomicEvent(loc);
end


rule "Stay At Dining Table"
    when
        $motion : Motion(id : sensorId == "M13" || sensorId == "M14" , status == "OFF") from entry-point "MotionStream"
        not( Motion(id_other : sensorId, id_other != id, id_other not in ("M13", "M14"), status == "ON", this after[0s, 5s] $motion) from entry-point "MotionStream")
    then
        // create atomic PersonLocation ContextAssertion
        DefaultAnnotationData motionAnn = (DefaultAnnotationData)$motion.getAnnotations();
        DefaultAnnotationData ann = new DefaultAnnotationData(motionAnn.getLastUpdated() + 5000, motionAnn.getConfidence());
        PersonLocation loc = new PersonLocation("DiningTable", ann);
        
        eventTracker.insertAtomicEvent(loc);
end


rule "Remain at dining table"
    timer (int: 0s 5s)
    when
        $loc : PersonLocation(location == "Kitchen") from entry-point "PersonLocationStream"
        not( Motion(id_other : sensorId, id_other not in ("M13", "M14"), status == "ON", this after[0s, 5s] $loc) from entry-point "MotionStream")
    then
        // create atomic PersonLocation ContextAssertion
        DefaultAnnotationData motionAnn = (DefaultAnnotationData)$loc.getAnnotations();
        DefaultAnnotationData ann = new DefaultAnnotationData(motionAnn.getLastUpdated() + 5000, motionAnn.getConfidence());
        PersonLocation sameLoc = new PersonLocation("DiningTable", ann);
        
        eventTracker.insertAtomicEvent(sameLoc);
end



// ================ in the kitchen
rule "In the kitchen"
    salience 100
    when 
        $motion : Motion(sensorId == "M16" || sensorId == "M17" || sensorId == "M18" , status : status == "ON") from entry-point "MotionStream"
    then
        // create atomic PersonLocation ContextAssertion
        DefaultAnnotationData motionAnn = (DefaultAnnotationData)$motion.getAnnotations();
        DefaultAnnotationData ann = new DefaultAnnotationData(motionAnn.getLastUpdated(), motionAnn.getConfidence());
        PersonLocation loc = new PersonLocation("Kitchen", ann);
        
        eventTracker.insertAtomicEvent(loc);
end


rule "Stay in kitchen"
    when
        $motion : Motion(id : sensorId == "M16" || sensorId == "M17" || sensorId == "M18", status : status == "OFF") from entry-point "MotionStream"
        not( Motion(id_other : sensorId, id_other != id, id_other not in ("M16", "M17", "M18"), status == "ON", this after[0s, 5s] $motion) from entry-point "MotionStream")
    then
        // create atomic PersonLocation ContextAssertion
        DefaultAnnotationData motionAnn = (DefaultAnnotationData)$motion.getAnnotations();
        DefaultAnnotationData ann = new DefaultAnnotationData(motionAnn.getLastUpdated() + 5000, motionAnn.getConfidence());
        PersonLocation loc = new PersonLocation("Kitchen", ann);
        
        eventTracker.insertAtomicEvent(loc);
end


rule "Remain in kitchen"
    timer(int: 0s 5s )
    when
        $loc : PersonLocation() from entry-point "PersonLocationStream"
        not( Motion(id_other : sensorId, id_other not in ("M16", "M17", "M18"), status == "ON", this after[0s, 5s] $loc) from entry-point "MotionStream")
    then
        // create atomic PersonLocation ContextAssertion
        DefaultAnnotationData motionAnn = (DefaultAnnotationData)$loc.getAnnotations();
        DefaultAnnotationData ann = new DefaultAnnotationData(motionAnn.getLastUpdated() + 5000, motionAnn.getConfidence());
        PersonLocation loc = new PersonLocation("Kitchen", ann);
        
        eventTracker.insertAtomicEvent(loc);
end
