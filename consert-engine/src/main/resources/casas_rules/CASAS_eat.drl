package org.aimas.consert

// Declare Metadata for CASAS events
import org.aimas.consert.tests.casas.assertions.Item
import org.aimas.consert.tests.casas.assertions.Cabinet
import org.aimas.consert.tests.casas.assertions.Water
import org.aimas.consert.tests.casas.assertions.Temperature
import org.aimas.consert.tests.casas.assertions.Burner
import org.aimas.consert.tests.casas.assertions.Phone
import org.aimas.consert.tests.casas.assertions.PersonLocation

import org.aimas.consert.model.annotations.AnnotationData
import org.aimas.consert.model.annotations.DefaultAnnotationData
import org.aimas.consert.model.annotations.AnnotationUtils

import org.aimas.consert.tests.casas.assertions.Cooking
import org.aimas.consert.tests.casas.assertions.Eating

import java.util.Date

import org.aimas.consert.engine.EventTracker
import org.aimas.consert.tests.casas.CASASTestSingle

global EventTracker eventTracker;

declare Cooking
    @role(event)
end

declare Eating
    @role(event)
end

/*
I01 = oatmeal
I02 = raisins
I03 = brown sugar
I04 = bowl
I05 = spoon

I06 = medicine
I07 = pot

I08 = phone book
D01 = cabinet
*/

rule "Preparing to eat"
	when
	    $loc: PersonLocation(location == "DiningTable") from entry-point "ExtendedPersonLocationStream"
	    $cook: Cooking(this annHappensBefore[0s, 60s] $loc || this annOverlaps[30s] $loc) from entry-point "ExtendedCookingStream"
	    $item: Item(sensorId == "I06", status == "ABSENT", this annHappensBefore[0s, 60s] $loc || this annOverlaps[60s] $loc) from entry-point "ItemStream"
	    $item2: Item(sensorId == "I07" || sensorId == "I04", status == "ABSENT") from entry-point "ItemStream"
	then
	    System.out.println("////// Triggering EATING rule following events: " + $loc + " AND " + $item + "\n");
	    long ts = drools.getWorkingMemory().getSessionClock().getCurrentTime();
	    DefaultAnnotationData ann = new DefaultAnnotationData(ts);
	    Eating eating = new Eating(ann);
	    
	    eventTracker.insertAtomicEvent(eating);
end
    

rule "Continuing to eat 1"
	when
	    $loc: PersonLocation(location == "DiningTable") from entry-point "ExtendedPersonLocationStream"
	    exists Eating($loc annIncludes this) from entry-point "EatingStream"
	then
	    //System.out.println("////// Triggering CONTINUE EATING rule following events: " + $loc + " AND " + $eat + "\n");
	    System.out.println("////// Triggering CONTINUE EATING rule following events: " + $loc + "\n");
	    
	    long ts = drools.getWorkingMemory().getSessionClock().getCurrentTime();
	    DefaultAnnotationData ann = new DefaultAnnotationData(ts);
	    Eating eating = new Eating(ann);
	    
	    eventTracker.insertAtomicEvent(eating);
end   
  


rule "Continuing to eat 2"
	when
	    $loc: PersonLocation(location == "DiningTable") from entry-point "ExtendedPersonLocationStream"
	    exists Eating($loc annIntersects this) from entry-point "ExtendedEatingStream"
	then
	    //System.out.println("////// Triggering CONTINUE EATING rule following events: " + $loc + " AND " + $eat + "\n");
	    System.out.println("////// Triggering CONTINUE EATING rule following events: " + $loc + "\n");
	    
	    long ts = drools.getWorkingMemory().getSessionClock().getCurrentTime();
	    DefaultAnnotationData ann = new DefaultAnnotationData(ts);
	    Eating eating = new Eating(ann);
	    
	    eventTracker.insertAtomicEvent(eating);
end
