package org.aimas.consert

// Declare Metadata for CASAS events
import org.aimas.consert.tests.casas.assertions.Motion
import org.aimas.consert.tests.casas.assertions.Item
import org.aimas.consert.tests.casas.assertions.Cabinet
import org.aimas.consert.tests.casas.assertions.Water
import org.aimas.consert.tests.casas.assertions.Temperature
import org.aimas.consert.tests.casas.assertions.Burner
import org.aimas.consert.tests.casas.assertions.Phone


import org.aimas.consert.model.annotations.AnnotationData
import org.aimas.consert.model.annotations.DefaultAnnotationData
import org.aimas.consert.model.annotations.AnnotationUtils

import org.aimas.consert.engine.EventTracker

global EventTracker eventTracker;


declare Motion
    @role(event)
    @timestamp(startTimestamp)
    @duration(eventDuration)
end


declare Item
    @role(event)
    @timestamp(startTimestamp)
    @duration(eventDuration)
end


declare Cabinet
    @role(event)
    @timestamp(startTimestamp)
    @duration(eventDuration)
end

declare Water
    @role(event)
    @timestamp(startTimestamp)
    @duration(eventDuration)
end


declare Temperature
    @role(event)
    @timestamp(startTimestamp)
    @duration(eventDuration)
end

declare Burner
    @role(event)
    @timestamp(startTimestamp)
    @duration(eventDuration)
end

declare Phone
    @role(event)
    @timestamp(startTimestamp)
    @duration(eventDuration)
end

// =========== BaseEvent insert rules - needed to create the event streams

rule "MotionInsertTest"
    when
        $motion : Motion(id : sensorId, status : status) from entry-point "MotionStream" 
    then
        System.out.println("Inserted MOTION event with sensorId: " + id + ", status: " + status + ", timestamp: " + (long)$motion.getStartTimestamp());
end

rule "ItemInsertTest"
    when
        $item : Item(id : sensorId, status : status) from entry-point "ItemStream" 
    then
        System.out.println("Inserted ITEM event with sensorId: " + id + ", status: " + status + ", timestamp: " + (long)$item.getStartTimestamp());
end

rule "CabinetInsertTest"
    when
        $cabinet : Cabinet(id : sensorId, status : status) from entry-point "CabinetStream" 
    then
        System.out.println("Inserted CABINET event with sensorId: " + id + ", status: " + status + ", timestamp: " + (long)$cabinet.getStartTimestamp());
end

rule "WaterInsertTest"
    when
        $water : Water(id : sensorId, val : value) from entry-point "WaterStream" 
    then
        System.out.println("Inserted WATER event with sensorId: " + id + ", value: " + val + ", timestamp: " + (long)$water.getStartTimestamp());
end

rule "TemperatureInsertTest"
    when
        $temp : Temperature(id : sensorId, val : value) from entry-point "TemperatureStream" 
    then
        System.out.println("Inserted TEMPERATURE event with sensorId: " + id + ", value: " + val + ", timestamp: " + (long)$temp.getStartTimestamp());
end

rule "BurnerInsertTest"
    when
        $burner : Burner(val : value) from entry-point "BurnerStream" 
    then
        System.out.println("Inserted BURNER event with value: " + val + ", timestamp: " + (long)$burner.getStartTimestamp());
end


rule "PhoneInsertTest"
    when
        $phone : Phone(val : value) from entry-point "PhoneStream" 
    then
        System.out.println("Inserted PHONE event with value: " + val + ", timestamp: " + (long)$phone.getStartTimestamp());
end

rule "UsingKitchenSink"
    when
        $motion : Motion(id : sensorId == "M17" || sensorId == "M18", status : status) from entry-point "MotionStream"

        $water : Water(id2 : sensorId == "AD1-A" ||  sensorId == "AD1-B", val : value) from entry-point "WaterStream"
        eval((long) $water.getStartTimestamp() < (long)$motion.getStartTimestamp())
    then
        System.out.println("Inserted UsingKitchenSink event with sensorId: " + id2 + ", value: " + val + ", timestamp: " + (long)$water.getStartTimestamp());
end

rule "UsingBurner"
    when
        $motion : Motion(id : sensorId == "M17" , status : status) from entry-point "MotionStream"

        $burner : Burner(val : value) from entry-point "BurnerStream"
        eval((long) $burner.getStartTimestamp() < (long)$motion.getStartTimestamp())
    then
        System.out.println("Inserted UsingBurner event with value: " + val + ", timestamp: " + (long)$burner.getStartTimestamp());
end

rule "SittingAtTable"
    when
        $motion : Motion(id : sensorId == "M13" || sensorId == "M14" , status : status == "OFF") from entry-point "MotionStream"
        forall (
                $motion2 : Motion(id2 : sensorId , status2 : status == "OFF") from entry-point "MotionStream"
                $motion3 : Motion(id3: sensorId == id2, eval((long) $motion3.getStartTimestamp() <= (long)$motion2.getStartTimestamp())) from entry-point "MotionStream"
                )
        then
               System.out.println("Inserted SittingAtTable event with sensorId: " + id + ", status: " + status + ", timestamp: " + (long)$motion.getStartTimestamp() );
        end

rule "SittingOnCouch"
    when
        $motion : Motion(id : sensorId == "M02" || sensorId == "M03" , status : status == "OFF") from entry-point "MotionStream"
        forall (
                $motion2 : Motion(id2 : sensorId , status2 : status == "OFF") from entry-point "MotionStream"
                $motion3 : Motion(id3: sensorId == id2, eval((long) $motion3.getStartTimestamp() <= (long)$motion2.getStartTimestamp())) from entry-point "MotionStream"
                )
        then
               System.out.println("Inserted SittingAtTable event with sensorId: " + id + ", status: " + status + ", timestamp: " + (long)$motion.getStartTimestamp() );
        end

rule "Cooking"
    when
        $motion : Motion(id : sensorId == "M16" || sensorId == "M17" || sensorId == "M18", status : status) from entry-point "MotionStream"
        $item : Item(id2 : sensorId == "I01" || sensorId == "I02" || sensorId == "I03" || sensorId == "I04" || sensorId == "I05"  , status2 : status == "ABSENT")  from entry-point "ItemStream"
        eval((long) $item.getStartTimestamp() > (long)$motion.getStartTimestamp())
    then
        System.out.println("Inserted Cooking event with sensorId: " + id2 + ", status: " + status2 + ", timestamp: " + (long)$item.getStartTimestamp());
end

/* eats if it is at the dining room table, it has the pot with the outmeal and the medicine container */

rule "Eating"
    when
        $motion : Motion(id : sensorId == "M13" || sensorId == "M14" , status : status == "OFF") from entry-point "MotionStream"
        $item1 : Item(id2 : sensorId == "I07" , status2 : status == "ABSENT")  from entry-point "ItemStream"
         forall (
                    $itemaux : Item(idaux: sensorId == id2, eval((long) $itemaux.getStartTimestamp() <= (long)$item1.getStartTimestamp())) from entry-point "ItemStream"
                  ) /* the last event should be "present" */

        $item2:  Item(id3 : sensorId == "I06" , status3 : status == "ABSENT")  from entry-point "ItemStream"
          forall (
                     $itemaux : Item(idaux: sensorId == id3, eval((long) $itemaux.getStartTimestamp() <= (long)$item2.getStartTimestamp())) from entry-point "ItemStream"
                   ) /*the last event should be "present" */
      then
        System.out.println("Inserted Eating event with sensorId: " + id + ", status: " + status + ", timestamp: " + (long)$motion.getStartTimestamp());
end

rule "Cleaning"
    when
     $motion : Motion(id : sensorId == "M17" || sensorId == "M18", status : status) from entry-point "MotionStream"
     $water : Water(id2 : sensorId == "AD1-A" ||  sensorId == "AD1-B", val : value) from entry-point "WaterStream"
     $item1 : Item(id3 : sensorId == "I07" , status2 : status == "ABSENT")  from entry-point "ItemStream"
      then
             System.out.println("Inserted Cleaning event with sensorId: " + id + ", status: " + status + ", timestamp: " + (long)$motion.getStartTimestamp());
end
