package org.aimas.consert

// Declare Metadata for CASAS events
import org.aimas.consert.tests.casas.assertions.Item
import org.aimas.consert.tests.casas.assertions.Cabinet
import org.aimas.consert.tests.casas.assertions.Phone
import org.aimas.consert.tests.casas.assertions.PersonLocation

import org.aimas.consert.model.annotations.AnnotationData
import org.aimas.consert.model.annotations.DefaultAnnotationData
import org.aimas.consert.model.annotations.AnnotationUtils

import org.aimas.consert.tests.casas.assertions.PhoneCall

import java.util.Date;

import org.aimas.consert.engine.core.EventTracker

global EventTracker eventTracker;


declare PhoneCall
    @role(event)
end


rule "Using Phone Book"
	when
	    $loc: PersonLocation(location == "DiningTable", locAnn : annotations#DefaultAnnotationData) from entry-point "ExtendedPersonLocationStream"
	    $item: Item(sensorId == "I08", status == "ABSENT", itemAnn : annotations#DefaultAnnotationData, this annHappensBefore[0s, 30s] $loc) from  entry-point "ItemStream"
	then
	    System.out.println("////// Triggering PHONE CALL following events: " + $loc + " AND " + $item + "\n");
	    
	    long ts = drools.getWorkingMemory().getSessionClock().getCurrentTime();
        DefaultAnnotationData ann = new DefaultAnnotationData(ts, locAnn.getConfidence(), itemAnn.getStartTime(), new Date(ts));
        
        //AnnotationData ann = locAnn.applyCombinationOperator(itemAnn);
        
        PhoneCall phoneCall = new PhoneCall(ann);
        eventTracker.insertDerivedEvent(phoneCall);
end




rule "Phone Call without using phone book"
	when
	    $phone: Phone(status == "START", phoneAnn : annotations#DefaultAnnotationData) from entry-point "PhoneStream"
	    
	    $loc: PersonLocation(location == "DiningTable", locAnn : annotations#DefaultAnnotationData, this annIncludes $phone) from entry-point "ExtendedPersonLocationStream"
	    
	    not (exists Phone(status == "END", this after $phone && $loc annIncludes this) from entry-point "PhoneStream")
	    not (exists PhoneCall(this annHappensBefore[0s, 10s] $phone || this annIntersects $phone) from entry-point "ExtendedPhoneCallStream")
	then
	    System.out.println("////// Triggering PHONE CALL WITHOUT PHONE BOOK: " + $loc + " AND " + $phone + "\n");
	    
	    //long ts = drools.getWorkingMemory().getSessionClock().getCurrentTime();
	    //DefaultAnnotationData ann = new DefaultAnnotationData(ts, locAnn.getConfidence(), phoneAnn.getStartTime(), new Date(ts));
	    
	    AnnotationData ann = locAnn.applyExtensionOperator(phoneAnn);
	    PhoneCall phoneCall = new PhoneCall(ann);
	    eventTracker.insertDerivedEvent(phoneCall);
end

rule "Phone Call after using phone book"
    when
        $phone: Phone(status == "START", phoneAnn : annotations#DefaultAnnotationData) from entry-point "PhoneStream"
        $loc: PersonLocation(location == "DiningTable", locAnn : annotations#DefaultAnnotationData, this annIncludes $phone) from entry-point "ExtendedPersonLocationStream"
        $phoneCall: PhoneCall($loc annIncludes this, phoneCallAnn : annotations#DefaultAnnotationData) from entry-point "ExtendedPhoneCallStream"
        not (exists Phone(status == "END", this after $phone && $loc annIncludes this) from entry-point "PhoneStream")
    then
        System.out.println("////// Triggering PHONE CALL AFTER PHONE BOOK following events: " + $loc + " AND " + $phone + "AND" + $phoneCall + "\n");
        
        //long ts = drools.getWorkingMemory().getSessionClock().getCurrentTime();
        //DefaultAnnotationData ann = new DefaultAnnotationData(ts, locAnn.getConfidence(), phoneAnn.getStartTime(), new Date(ts));
        
        AnnotationData ann = phoneCallAnn.applyExtensionOperator(locAnn);
        PhoneCall phoneCall = new PhoneCall(ann);
        eventTracker.insertDerivedEvent(phoneCall);
end