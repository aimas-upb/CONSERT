package org.aimas.consert

// Declare the metadata for the `Position` and `LLA` events
import org.aimas.consert.eventmodel.Position
import org.aimas.consert.eventmodel.SittingLLA
import org.aimas.consert.eventmodel.WalkingLLA
import org.aimas.consert.eventmodel.StandingLLA

import org.aimas.consert.eventmodel.WorkingHLA
import org.aimas.consert.eventmodel.DiscussingHLA
import org.aimas.consert.eventmodel.ExerciseHLA
import org.aimas.consert.eventmodel.DiningHLA

import org.aimas.consert.eventmodel.AnnotationInfo
import org.aimas.consert.eventmodel.AnnotationUtils
import org.aimas.consert.eventmodel.ValidityInterval

// ============ Declare Position metadata
declare Position
    @role(event)
    @timestamp(startTimestamp)
    @duration(eventDuration)
end

// ============ Declare LLA metadata
declare SittingLLA
    @role(event)
    @timestamp(startTimestamp)
    @duration(eventDuration)
end

declare WalkingLLA
    @role(event)
    @timestamp(startTimestamp)
    @duration(eventDuration)
end

declare StandingLLA
    @role(event)
    @timestamp(startTimestamp)
    @duration(eventDuration)
end

// =========== Declare HLA metadata
declare WorkingHLA
    @role(event)
    @timestamp(startTimestamp)
    @duration(eventDuration)
end

declare DiscussingHLA
    @role(event)
    @timestamp(startTimestamp)
    @duration(eventDuration)
end

declare ExerciseHLA
    @role(event)
    @timestamp(startTimestamp)
    @duration(eventDuration)
end

declare DiningHLA
    @role(event)
    @timestamp(startTimestamp)
    @duration(eventDuration)
end

// =========== BaseEvent insert rules

rule "PositionInsertTest"
    when
        $pos : Position(p : person, t : type) from entry-point "PositionStream" 
    then
        System.out.println("Inserted POS event with person: " + p.getName() + ", type: " + t + ", timestamp: " +
            (long)$pos.getStartTimestamp() + ", duration: " + $pos.getEventDuration());
end

rule "SittingLLAInsertTest"
    when
        $lla : SittingLLA(p : person, t : type) from entry-point "LLAStream"
    then
        System.out.println("Inserted LLA event with person: " + p.getName() + ", type: " + t + ", timestamp: " +
            (long)$lla.getStartTimestamp() + ", duration: " + $lla.getEventDuration());
end

rule "WalkingLLAInsertTest"
    when
        $lla : WalkingLLA(p : person, t : type) from entry-point "LLAStream"
    then
        System.out.println("Inserted LLA event with person: " + p.getName() + ", type: " + t + ", timestamp: " +
            (long)$lla.getStartTimestamp() + ", duration: " + $lla.getEventDuration());
end

rule "StandingLLAInsertTest"
    when
        $lla : StandingLLA(p : person, t : type) from entry-point "LLAStream"
    then
        System.out.println("Inserted LLA event with person: " + p.getName() + ", type: " + t + ", timestamp: " +
            (long)$lla.getStartTimestamp() + ", duration: " + $lla.getEventDuration());
end

rule "ExtendedPositionInsertTest"
    when
        $pos : Position(p : person, t : type) from entry-point "ExtendedPositionStream"
    then
        System.out.println("Inserted EXTENDED POS event with person: " + p.getName() + ", type: " + t +
            ", lastUpdated: " + (long)$pos.getAnnotations().getLastUpdated() + ", from: " +
            $pos.getAnnotations().getStartTime().getTimeInMillis() + ", to: " +
            $pos.getAnnotations().getEndTime().getTimeInMillis());
end

rule "ExtendedSittingLLAInsertTest"
    when
        $lla : SittingLLA(p : person, t : type) from entry-point "ExtendedLLAStream"
    then
        System.out.println("Inserted EXTENDED LLA event with person: " + p.getName() + ", type: " + t +
            ", lastUpdated: " + (long)$lla.getAnnotations().getLastUpdated() + ", from: " +
            $lla.getAnnotations().getStartTime().getTimeInMillis() + ", to: " +
            $lla.getAnnotations().getEndTime().getTimeInMillis());
end


rule "ExtendedWalkingLLAInsertTest"
    when
        $lla : WalkingLLA(p : person, t : type) from entry-point "ExtendedLLAStream"
    then
        System.out.println("Inserted EXTENDED LLA event with person: " + p.getName() + ", type: " + t +
            ", lastUpdated: " + (long)$lla.getAnnotations().getLastUpdated() + ", from: " +
            $lla.getAnnotations().getStartTime().getTimeInMillis() + ", to: " +
            $lla.getAnnotations().getEndTime().getTimeInMillis());
end


rule "ExtendedStandingLLAInsertTest"
    when
        $lla : StandingLLA(p : person, t : type) from entry-point "ExtendedLLAStream"
    then
        System.out.println("Inserted EXTENDED LLA event with person: " + p.getName() + ", type: " + t +
        ", lastUpdated: " + (long)$lla.getAnnotations().getLastUpdated() + ", from: " +
        $lla.getAnnotations().getStartTime().getTimeInMillis() + ", to: " +
        $lla.getAnnotations().getEndTime().getTimeInMillis());
end

rule "ExtendedWorkingHLATest"
    when
        $hla : WorkingHLA(p : person) from entry-point "ExtendedWorkingHLA"
    then
        System.out.println("Inserted EXTENDED WORKING HLA event with person: " + p.getName()  + ", lastUpdated: " +
            (long)$hla.getAnnotations().getLastUpdated() + ", from: " +
            $hla.getAnnotations().getStartTime().getTimeInMillis() + ", to: " +
            $hla.getAnnotations().getEndTime().getTimeInMillis());
end


rule "ExtendedDiscussingHLATest"
    when
        $hla : DiscussingHLA(p : person) from entry-point "ExtendedDiscussingHLA"
    then
        System.out.println("Inserted EXTENDED DISCUSSING HLA event with person: " + p.getName()  + ", lastUpdated: " +
            (long)$hla.getAnnotations().getLastUpdated() + ", from: " +
            $hla.getAnnotations().getStartTime().getTimeInMillis() + ", to: " +
            $hla.getAnnotations().getEndTime().getTimeInMillis());
end

rule "ExtendedExerciseHLATest"
    when
        $hla : ExerciseHLA(p : person) from entry-point "ExtendedExerciseHLA"
    then
        System.out.println("Inserted EXTENDED EXERCISE HLA event with person: " + p.getName()  + ", lastUpdated: " +
            (long)$hla.getAnnotations().getLastUpdated() + ", from: " +
            $hla.getAnnotations().getStartTime().getTimeInMillis() + ", to: " +
            $hla.getAnnotations().getEndTime().getTimeInMillis());
end

rule "ExtendedDiningHLATest"
    when
        $hla : DiningHLA(p : person) from entry-point "ExtendedDiningHLA"
    then
        System.out.println("Inserted EXTENDED DINING HLA event with person: " + p.getName()  + ", lastUpdated: " +
            (long)$hla.getAnnotations().getLastUpdated() + ", from: " +
            $hla.getAnnotations().getStartTime().getTimeInMillis() + ", to: " +
            $hla.getAnnotations().getEndTime().getTimeInMillis());
end

// =========== HLA detection rules

rule "WorkingHLA"
    when
        $pos : Position($p : person, type == Position.Type.WORK_AREA, annPos : annotations) from entry-point "ExtendedPositionStream"
        $lla : SittingLLA(person == $p, $annLLA : annotations) from entry-point "ExtendedLLAStream"

        eval(AnnotationUtils.intersects($pos.getAnnotations().getStartTime(), $pos.getAnnotations().getEndTime(),
            $lla.getAnnotations().getStartTime(), $lla.getAnnotations().getEndTime()))
    then
        // create WorkingHLA
        double hlaTs = AnnotationUtils.maxTimestamp($pos.getAnnotations().getLastUpdated(), $lla.getAnnotations().getLastUpdated());
        double hlaConfidence = AnnotationUtils.maxConfidence($pos.getAnnotations().getConfidence(), $lla.getAnnotations().getConfidence());
        ValidityInterval hlaInterval = AnnotationUtils.computeIntersection(
            $pos.getAnnotations().getStartTime(),
            $pos.getAnnotations().getEndTime(),
            $lla.getAnnotations().getStartTime(),
            $lla.getAnnotations().getEndTime());

        AnnotationInfo ann = new AnnotationInfo(hlaTs, hlaConfidence, hlaInterval.getStart(), hlaInterval.getEnd());
        WorkingHLA hla = new WorkingHLA($p, ann);

        entryPoints["ExtendedWorkingHLA"].insert(hla);
end

rule "DiscussingHLA"
    when
        $pos : Position($p : person, type == Position.Type.CONFERENCE_AREA, annPos : annotations) from entry-point "ExtendedPositionStream"
        $lla : StandingLLA(person == $p, $annLLA : annotations) from entry-point "ExtendedLLAStream"
        eval(AnnotationUtils.intersects($pos.getAnnotations().getStartTime(), $pos.getAnnotations().getEndTime(),
            $lla.getAnnotations().getStartTime(), $lla.getAnnotations().getEndTime()))
            then
                // create DiscussingHLA
                double hlaTs = AnnotationUtils.maxTimestamp($pos.getAnnotations().getLastUpdated(), $lla.getAnnotations().getLastUpdated());
                double hlaConfidence = AnnotationUtils.maxConfidence($pos.getAnnotations().getConfidence(), $lla.getAnnotations().getConfidence());
                ValidityInterval hlaInterval = AnnotationUtils.computeIntersection(
                    $pos.getAnnotations().getStartTime(),
                    $pos.getAnnotations().getEndTime(),
                    $lla.getAnnotations().getStartTime(),
                    $lla.getAnnotations().getEndTime());

                AnnotationInfo ann = new AnnotationInfo(hlaTs, hlaConfidence, hlaInterval.getStart(), hlaInterval.getEnd());
                DiscussingHLA hla = new DiscussingHLA($p, ann);

                entryPoints["ExtendedDiscussingHLA"].insert(hla);
end

rule "ExerciseHLA"
    when
        $pos : Position($p : person, type == Position.Type.EXERCISE_AREA, annPos : annotations) from entry-point "ExtendedPositionStream"
        $lla : StandingLLA(person == $p, $annLLA : annotations) from entry-point "ExtendedLLAStream"
        eval(AnnotationUtils.intersects($pos.getAnnotations().getStartTime(), $pos.getAnnotations().getEndTime(),
            $lla.getAnnotations().getStartTime(), $lla.getAnnotations().getEndTime()))
            then
                // create ExerciseHLA
                double hlaTs = AnnotationUtils.maxTimestamp($pos.getAnnotations().getLastUpdated(), $lla.getAnnotations().getLastUpdated());
                double hlaConfidence = AnnotationUtils.maxConfidence($pos.getAnnotations().getConfidence(), $lla.getAnnotations().getConfidence());
                ValidityInterval hlaInterval = AnnotationUtils.computeIntersection(
                    $pos.getAnnotations().getStartTime(),
                    $pos.getAnnotations().getEndTime(),
                    $lla.getAnnotations().getStartTime(),
                    $lla.getAnnotations().getEndTime());

                AnnotationInfo ann = new AnnotationInfo(hlaTs, hlaConfidence, hlaInterval.getStart(), hlaInterval.getEnd());
                ExerciseHLA hla = new ExerciseHLA($p, ann);

                entryPoints["ExtendedExerciseHLA"].insert(hla);
end

rule "DiningHLA"
    when
        $pos : Position($p : person, type == Position.Type.DINING_AREA, annPos : annotations) from entry-point "ExtendedPositionStream"
        $lla : SittingLLA(person == $p, $annLLA : annotations) from entry-point "ExtendedLLAStream"
        eval(AnnotationUtils.intersects($pos.getAnnotations().getStartTime(), $pos.getAnnotations().getEndTime(),
            $lla.getAnnotations().getStartTime(), $lla.getAnnotations().getEndTime()))
            then
                // create ExerciseHLA
                double hlaTs = AnnotationUtils.maxTimestamp($pos.getAnnotations().getLastUpdated(), $lla.getAnnotations().getLastUpdated());
                double hlaConfidence = AnnotationUtils.maxConfidence($pos.getAnnotations().getConfidence(), $lla.getAnnotations().getConfidence());
                ValidityInterval hlaInterval = AnnotationUtils.computeIntersection(
                    $pos.getAnnotations().getStartTime(),
                    $pos.getAnnotations().getEndTime(),
                    $lla.getAnnotations().getStartTime(),
                    $lla.getAnnotations().getEndTime());

                AnnotationInfo ann = new AnnotationInfo(hlaTs, hlaConfidence, hlaInterval.getStart(), hlaInterval.getEnd());
                DiningHLA hla = new DiningHLA($p, ann);

                entryPoints["ExtendedDiningHLA"].insert(hla);
end
